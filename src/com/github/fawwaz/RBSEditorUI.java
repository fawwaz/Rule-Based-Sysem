/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.fawwaz;

import com.github.fawwaz.objects.RBSObject;
import com.github.fawwaz.objects.RBSRules;
import com.github.fawwaz.parser.MyParser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.SpringLayout;
import javax.swing.SwingUtilities;

/**
 *
 * @author Asus
 */
public class RBSEditorUI extends javax.swing.JFrame {
    String cwd = System.getProperty("user.dir");
    final JFileChooser jfc = new JFileChooser(cwd);
    File rules,facts;
    final public MyParser parser;
    
    ArrayList<RBSObject> the_facts;
    ArrayList<RBSRules> the_rules;
    HashMap<String, Object> temporary_variable;
    /**
     * Creates new form RBSEditorUI
     */
    public RBSEditorUI() {
        parser = new MyParser();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 300));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Rules :");

        jLabel2.setText("Facts :");

        jButton1.setText("Save Rules");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save Facts");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setPreferredSize(new java.awt.Dimension(800, 300));

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel3.setText("Working Conflict Set");

        jButton4.setText("Execute");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jLabel4.setText("Working Memory");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(93, 93, 93))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Open Rules");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Open Facts");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setLabel("Execute");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem3.setText("About");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(jfc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION){
            return ;
        }else{
            facts = jfc.getSelectedFile();
            readFile(facts.toString(), jTextArea2);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(jfc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION){
            return ;
        }else{
            rules = jfc.getSelectedFile();
            readFile(rules.toString(), jTextArea1);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        the_rules = new ArrayList<>();
        saveFile(rules.toString(),jTextArea1);        
        String[] explodeds = jTextArea1.getText().split("\n");
        swapRules(the_rules, explodeds);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        the_facts = new ArrayList<>();
        saveFile(facts.toString(),jTextArea2);
        String[] explodeds = jTextArea2.getText().split("\n");
        swapFacts(the_facts,explodeds);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        findConflictSet();
        copyfacts();
        System.out.println("Finished finding conflict set");
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void readFile(String filename,JTextArea area){
        try{
            FileReader reader = new FileReader(filename);
            area.read(reader, null);
            reader.close();
        }catch(IOException e){
            System.out.println("ERROR");
            e.printStackTrace();
        }
    }
    
    private void saveFile(String filename,JTextArea area){
        File _file = null;
        FileWriter writer = null;
        
        try{
            _file = new File(filename);
            writer = new FileWriter(_file);
            writer.write(area.getText());
            writer.close();
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }catch(IOException ioe){
            ioe.printStackTrace();
        }
    }
    
    private void swapRules(ArrayList<RBSRules> rules,String[] exploded){
        try{
            for (int i = 0; i < exploded.length; i++) {
                //parser.Parse(exploded[i]);
                RBSRules _rules = new RBSRules();
                _rules.actions = parser.getActions(exploded[i]);
                _rules.conditions = parser.getConditions(exploded[i]);
                the_rules.add(_rules);
            }
        }catch(Exception e){
            System.out.println("Rule format missmatch or some error happens.");
        }
        
        System.out.println("END TRANSFERING NOW PRINTING");
        printRules();
    }
    
    private void swapFacts(ArrayList<RBSObject> facts,String[] exploded){
        for (int i = 0; i < exploded.length; i++) {
            RBSObject rbsobject = new RBSObject();
            rbsobject.attributes    = parser.getAttributes(exploded[i]);
            rbsobject.name          = parser.getObjectName(exploded[i]);
            the_facts.add(rbsobject);
        }
        System.out.println("END TRANSFERING NOW PRINTING");
        printFacts();
    }
    
    private void printRules(){
        for (int i = 0; i < the_rules.size(); i++) {
            RBSRules curr_rule = the_rules.get(i);
            System.out.println("Rule Number :"+i);
            System.out.println("================");
            System.out.println("Conditions :");
            
            for (int j = 0; j < curr_rule.conditions.size(); j++) {
                System.out.println(curr_rule.conditions.get(j).toString());
            }
            System.out.println("Actions:");
            for (int j = 0; j < curr_rule.actions.size(); j++) {
                System.out.println(curr_rule.actions.get(j).toString());
            }
            System.out.println("~~~~~~~~~~~~~~~");
        }
    }
    
    private void printFacts(){
        for (int i = 0; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            System.out.println(curr_fact.toString());
            System.out.println("~~~~~~~~~~~~~~~");
        }
    }
    
    private void findConflictSet(){
        ArrayList<Integer> conflictfacts = new ArrayList<>();
        ArrayList<Integer> conflictrules = new ArrayList<>();
        for (int i = 0; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            for (int j = 0; j < the_rules.size(); j++) {
                System.out.println("Checking rule number : "+j+ " with fact number:"+i);
                RBSRules curr_rule = the_rules.get(j);
                // Reset / Clean up the temporary variable
                temporary_variable = new HashMap<>();
                if(checkconflict(curr_rule,curr_fact)){
                    System.out.println("[DEBUG]Adding conflict set");
                    System.out.println("i >>> "+i+"j >>>"+j);
                    conflictfacts.add(i);
                    conflictrules.add(j);
                }
            }
        }
        printConflicSet(conflictfacts, conflictrules);
    }
    
    public void printConflicSet(ArrayList<Integer> conflictfacts, ArrayList<Integer> Conflictrules){
        System.out.println("Printing conflict Fact :");
        for (int i = 0; i < conflictfacts.size(); i++) {
            System.out.println("["+i+"] Conflict fact number :"+conflictfacts.get(i));
        }
        System.out.println("Printing conflict rules :");
        for (int i = 0; i < Conflictrules.size(); i++) {
            System.out.println("["+i+"] Conflict rules number :"+Conflictrules.get(i));
        }
        System.out.println("======================");
        
    }
    
    
    // Return true jika seluruh condition terpenuhi, return false jika ternyata rule tidak cocok dengan fact.
    private boolean checkconflict(RBSRules rule,RBSObject fact){
        // By default dianggap selalu memenuhi rule, jika ada satu kondisi saja yang tidak memenuh langsung return false.
        for (int i = 0; i < rule.conditions.size(); i++) {
            System.out.println("checking condition number "+i + "of the rule");
            RBSObject curr_condition = rule.conditions.get(i);
            if(!checkcondition(curr_condition,fact)){
                return false;
            }
        }
        return true;
    }
    
    // Return true jika objek memenuhi condition, false sebaliknya
    private boolean checkcondition(RBSObject condition,RBSObject fact){
        if(condition.isPositive){
            System.out.println("Entering positive");
            System.out.println("Condition name : "+condition.name);
            System.out.println("Fact name:"+fact.name);
            if(condition.name.equals(fact.name)){
                // Harus memenuhi semua condition jadi by default return true kecuali ada yang masalh langsung return false
                for(String key : condition.attributes.keySet()){
                    String val = condition.attributes.get(key);
                    System.out.println("[RULE]Key to bechecked : "+key);
                    System.out.println("[RULE]Val to bechecked : "+val);
                    if(val.matches(MyParser.specification_variable)){
                        System.out.println("MASUK TEST TIPE VARIABEL");
                        // Kalau atom dianggap match seluruhnya dan bisa karena general.., justru masukin ke temporary variable
                        // cek dulu ada atau enggak variabel itu, kalau ada replace rule dengan variabel yang udah ada di temporary memory tapi kalau belum justru assign ke temporary memory...
                        if(!temporary_variable.containsKey(val)){
                            temporary_variable.put(val, fact.attributes.get(key));
                        }else{
                            // Evaluate seperti atom..
                            if(fact.hasAttributeValue(key, (String) temporary_variable.get(val))){
//                                return true;
                            }else{
                                return false;
                            }
                        }
                        
                        //return true;
                    }else if(val.matches(MyParser.specification_test_overall)){
                        System.out.println("MASUK TEST TIPE ");
                        // handle gimana coba ...
                        System.out.println("HARUSNYA KITA BIKIN FUNGSI EVALUASI TEST MATEMATIKA");
                        if(doBooleanEvaluation(key, val, fact)){
                            System.out.println("REturn true dan factnya adalha : " + fact.toString());
//                          return true;
                        }else{
                            System.out.println("Return false dan factnya adlaha " + fact.toString());
                            return false;
                        }
                    }else if(val.matches(MyParser.specification_atom)){
                        System.out.println("MASUK TEST TIPE ATOM");
                        // return membership benergak 
                        
                        if(fact.hasAttribute(key)){
                            if (fact.hasAttributeValue(key, val)) {
                                System.out.println("FACT : " + key + " >>> " + fact.attributes.get(key));
                                //return true;
                            } else {
                                return false;
                            }
                        }else{
                            return false;
                        }
                    }
                }
                return true;
            }else{
                // Kalau objeknya sudah beda pasti beda..
                return false;
            }
        }else{
            System.out.println("Entering negative");
            if(condition.name.equals(fact.name)){
                for(String key : condition.attributes.keySet()){
                    String val = condition.attributes.get(key);
                    System.out.println("[RULE]Key to bechecked : "+key);
                    System.out.println("[RULE]Val to bechecked : "+val);
                    if(val.matches(MyParser.specification_variable)){
                        // Kalau atom dianggap match seluruhnya dan bisa karena general.., justru masukin ke temporary variable
                        // cek dulu ada atau enggak variabel itu, kalau ada replace rule dengan variabel yang udah ada di temporary memory tapi kalau belum justru assign ke temporary memory...
                        if(!temporary_variable.containsKey(val)){
                            temporary_variable.put(val, fact.attributes.get(key));
                        }else{
                            // Evaluate seperti atom..
                            if(fact.hasAttributeValue(key, (String) temporary_variable.get(val))){
//                                return false;
                            }else{
                                return true;
                            }
                        }
                        
                        //return true;
                    }else if(val.matches(MyParser.specification_test_overall)){
                        // handle gimana coba ...
                        System.out.println("HARUSNYA KITA BIKIN FUNGSI EVALUASI TEST MATEMATIKA");
                        if(!doBooleanEvaluation(key, val, fact)){ // Penting tanda seru di depan soalnya harus ada .
                            System.out.println("REturn false dan factnya adalha : " + fact.toString());
//                            return true;
                        }else{
                            return true; // HATI HATI INI KETUKER BENERAN GAK PUSING KEPALA BARBIE INI CUMA BUAT YANG
                        }
                    }else if(val.matches(MyParser.specification_atom)){
                        // return membership benergak 
                        if(fact.hasAttribute(key)){
                            if(fact.hasAttributeValue(key, val)){
                                //return false;
                            }else{
                                return true;
                            }
                        }
                    }
                }
                return false;
            }else{
                System.out.println("YANG NEGATIVE BELUM DIIMPMENET SEMUANYA LOH");
                return false;
            }
        }
    }
    
    // return true if the fact suitable with the rule
    public boolean doBooleanEvaluation(String attrname,String rule, RBSObject fact){
        if(rule.matches(MyParser.specification_test_overall)){
            // Contoh {<s} atau {<2}
            if(rule.matches(MyParser.specification_test2_variabel)){
                // Mungkin menimbulkan exception terutama kalau gak ada :
                String true_rule = rule;
                String variable_name = rule.replaceAll("[<>\\{\\}]", "");
                System.out.println("Rule input "+rule);
                        
//                if(temporary_variable.containsKey(variable_name)){
//                    true_rule = rule.replace(variable_name, (String) temporary_variable.get(variable_name));
//                }else{
//                    // Throw exception .. 
//                }
                if(rule.replace("{", "").startsWith("<")){
                    System.out.println("Unhandled yet .. so you should handle as the same as below ");
                    int indexmax  = findTheMostMaximum(attrname,fact);
                    if(the_facts.get(indexmax).equals(fact)){
                        return true;
                    }else{
                        return false;
                    }
//                    System.out.println("Temporary variable var name : "+variable_name+ " value : " +temporary_variable.get(variable_name));
//                    System.out.println("Attribute name fact :"+fact.attributes.get(attrname));
//                    if(Integer.valueOf(fact.attributes.get(attrname)) < Integer.valueOf((String) temporary_variable.get(variable_name))){
//                        return true;
//                    }else{
//                        return false;
//                    }    
                }else if(rule.replace("{", "").startsWith(">")){
                    /// PUSINNNGG PUSINNGG PUSINGG
                    System.out.println("Temporary variable var name : "+variable_name+ " value : " +temporary_variable.get(variable_name));
                    System.out.println("Attribute name fact :"+fact.attributes.get(attrname));
                    int indexmin = findTheMostMinimum(attrname);
                    if(the_facts.get(indexmin).equals(fact)){
                        return true;
                    }else{
                        return false;
                    }
                }
            }else if(rule.matches(MyParser.specification_test3)){ // Case : {NOT XYZ}
                if(rule.replace("{", "").replace("}", "").trim().startsWith("NOT")){
                    System.out.println("Masuk ke blok not dan attribute name : "+attrname);
                    if(fact.hasAttribute(attrname)){
                        System.out.println("The fact has attribute"+attrname);
                        if (fact.hasAttributeValue(attrname, rule.replace("{", "").replace("}", "").replace("NOT", "").trim())) {
                            System.out.println("Atau justru malah kesini?");
                            return false;
                        } else {
                            System.out.println("Sherusnya kesini");
                            return true;
                        }
                    }else{
                        System.out.println("The fact doesn't have attribute"+attrname);
                        return false;
                    }
                }else{
                    if(fact.hasAttributeValue(attrname, rule.replace("{", "").replace("}", "").trim())){
                        System.out.println("Masuk ke blok biasa dan attribute name"+attrname);
                        return true;
                    }else{
                        return false;
                    }
                }
                
            } // Harusnya ada lebih banyak else if lagi selain 
        }else{
            // Harusnya else if ..
            return false;
        }
        // Ini jgua gak bener :
        return false;
    }
    
    public void copyfacts(){
        jTextArea3.setText(jTextArea2.getText());
    }
    
    // Return fact id which is the most minimum
    private int findTheMostMinimum(String attrname) {
        boolean firsttime = true;
        int mostminimum = 0;
        for (int i = 0; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            if(curr_fact.hasAttribute(attrname) && firsttime){
                mostminimum = i;
                firsttime = false;
            }else if(curr_fact.hasAttribute(attrname) && the_facts.get(mostminimum).hasAttribute(attrname)){
                int curr_val = Integer.valueOf((String) curr_fact.attributes.get(attrname));
                int temp_min_val = Integer.valueOf((String) the_facts.get(mostminimum).attributes.get(attrname));
                if(temp_min_val >= curr_val){
                    mostminimum = i;
                }
            }
        }
        return mostminimum;
    }
    
    private int findTheMostMaximum(String attrname,RBSObject fact){
        int mostmaximumindex =0;
        for (int i = 1; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            if(curr_fact.hasAttribute(attrname) && (the_facts.get(mostmaximumindex).attributes.get(attrname) != null)){
                if(Integer.valueOf((String) curr_fact.attributes.get(attrname)) >= Integer.valueOf((String) the_facts.get(mostmaximumindex).attributes.get(attrname))){
                    mostmaximumindex = i;
                }
            }
        }
        return mostmaximumindex;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RBSEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RBSEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RBSEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RBSEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RBSEditorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables

}
