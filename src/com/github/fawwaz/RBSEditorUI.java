/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.fawwaz;

import com.github.fawwaz.objects.FactRulePair;
import com.github.fawwaz.objects.Pair;
import com.github.fawwaz.objects.RBSActions;
import com.github.fawwaz.objects.RBSGraphNode;
import com.github.fawwaz.objects.RBSObject;
import com.github.fawwaz.objects.RBSRules;
import com.github.fawwaz.objects.RFPair;
import com.github.fawwaz.objects.ThreePair;
import com.github.fawwaz.parser.MyParser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.SpringLayout;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class RBSEditorUI extends javax.swing.JFrame {
    String cwd = System.getProperty("user.dir");
    final JFileChooser jfc = new JFileChooser(cwd);
    File rules,facts;
    final public MyParser parser;
    
    ArrayList<RBSObject> the_facts;
    ArrayList<RBSRules> the_rules;
    ArrayList<Integer> conflictfacts;
    ArrayList<Integer> conflictrules;
    ArrayList<Integer> conflictconditions;
    HashMap<String, Object> temporary_variable;
    String[] conflict_method_order = new String[4];
    HashSet<FactRulePair> rule_fact_pairs;
    ArrayList<RFPair> conflicts;
    HashSet<RFPair> history;
    
    ArrayList<RBSGraphNode> rete_network;
    // for table 
    String[] header = new String[]{"Conflict Rule","Conflict Facts"};
    DefaultTableModel dtm;
    
    /**
     * Creates new form RBSEditorUI
     */
    public RBSEditorUI() {
        dtm = new DefaultTableModel(0,0);
        dtm.setColumnIdentifiers(header);
        parser = new MyParser();
        initComponents();
        jTable1.setModel(dtm);
        jTextField1.setText("RF,RC,SP,RO");
        rete_network = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 300));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Rules :");

        jLabel2.setText("Facts :");

        jButton1.setText("Save Rules");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save Facts");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setPreferredSize(new java.awt.Dimension(800, 300));

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel3.setText("Working Conflict Set");

        jButton4.setText("Execute");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jLabel4.setText("Working Memory");

        jTextField1.setText("jTextField1");

        jLabel5.setText("Rule Order");

        jButton3.setText("Step By Step");
        jButton3.setToolTipText("");

        jLabel6.setText("Selected Rule");

        jTextField2.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jButton3)
                    .addComponent(jLabel6)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Open Rules");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Open Facts");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setLabel("Execute");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem3.setText("About");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 877, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(jfc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION){
            return ;
        }else{
            facts = jfc.getSelectedFile();
            readFile(facts.toString(), jTextArea2);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(jfc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION){
            return ;
        }else{
            rules = jfc.getSelectedFile();
            readFile(rules.toString(), jTextArea1);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        rule_fact_pairs = new HashSet<>();
        the_rules = new ArrayList<>();
        history = new HashSet<>();
        saveFile(rules.toString(),jTextArea1);        
        String[] explodeds = jTextArea1.getText().split("\n");
        swapRules(the_rules, explodeds);
        generateNetFirst();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        rule_fact_pairs = new HashSet<>();
        the_facts = new ArrayList<>();
        history = new HashSet<>();
        saveFile(facts.toString(),jTextArea2);
        String[] explodeds = jTextArea2.getText().split("\n");
        swapFacts(the_facts,explodeds);
        copyfacts();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        conflicts = new ArrayList<>();
        loadOrder();
        findConflictSet3();
        printRFPairs();
        doResolution2(decideResolveMethod());
        
        updateTable();
        PrintWME();
//        System.out.println("Finished finding conflict set");
        
        printOrder();
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void readFile(String filename,JTextArea area){
        try{
            FileReader reader = new FileReader(filename);
            area.read(reader, null);
            reader.close();
        }catch(IOException e){
            System.out.println("ERROR");
            e.printStackTrace();
        }
    }
    
    private void saveFile(String filename,JTextArea area){
        File _file = null;
        FileWriter writer = null;
        
        try{
            _file = new File(filename);
            writer = new FileWriter(_file);
            writer.write(area.getText());
            writer.close();
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }catch(IOException ioe){
            ioe.printStackTrace();
        }
    }
    
    private void swapRules(ArrayList<RBSRules> rules,String[] exploded){
        try{
            for (int i = 0; i < exploded.length; i++) {
                //parser.Parse(exploded[i]);
                RBSRules _rules = new RBSRules();
                _rules.actions = parser.getActions(exploded[i]);
                _rules.conditions = parser.getConditions(exploded[i]);
                the_rules.add(_rules);
            }
        }catch(Exception e){
            System.out.println("Rule format missmatch or some error happens.");
        }
        
        System.out.println("END TRANSFERING NOW PRINTING");
        printRules();
    }
    
    private void swapFacts(ArrayList<RBSObject> facts,String[] exploded){
        for (int i = 0; i < exploded.length; i++) {
            RBSObject rbsobject = new RBSObject();
            rbsobject.attributes    = parser.getAttributes(exploded[i]);
            rbsobject.name          = parser.getObjectName(exploded[i]);
            the_facts.add(rbsobject);
        }
        System.out.println("END TRANSFERING NOW PRINTING");
        printFacts();
    }
    
    private void printRules(){
        for (int i = 0; i < the_rules.size(); i++) {
            RBSRules curr_rule = the_rules.get(i);
            System.out.println("Rule Number :"+i);
            System.out.println("================");
            System.out.println("Conditions :");
            
            for (int j = 0; j < curr_rule.conditions.size(); j++) {
                System.out.println(curr_rule.conditions.get(j).toString());
            }
            System.out.println("Actions:");
            for (int j = 0; j < curr_rule.actions.size(); j++) {
                System.out.println(curr_rule.actions.get(j).toString());
            }
            System.out.println("~~~~~~~~~~~~~~~");
        }
    }
    
    private void printFacts(){
        for (int i = 0; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            System.out.println(curr_fact.toString());
            System.out.println("~~~~~~~~~~~~~~~");
        }
    }
    
    private void findConflictSet(){
        conflictfacts = new ArrayList<>();
        conflictrules = new ArrayList<>();
        conflictconditions = new ArrayList<>();
        for (int i = 0; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            for (int j = 0; j < the_rules.size(); j++) {
                System.out.println("Checking rule number : "+j+ " with fact number:"+i);
                RBSRules curr_rule = the_rules.get(j);
                // Reset / Clean up the temporary variable
                temporary_variable = new HashMap<>();
                if(checkconflict(curr_rule,the_facts.get(j))){
                    System.out.println("[DEBUG]Adding conflict set");
                    System.out.println("i >>> "+i+"j >>>"+j);
                    conflictfacts.add(i);
                    conflictrules.add(j);
                }
            }
        }
        printConflicSet(conflictfacts, conflictrules);
    }
    
    private void findConflictSet2(){
        // Clean up / create ulang agenda saat setiap siklus mencapai conflict set..s
        conflictfacts = new ArrayList<>();
        conflictrules = new ArrayList<>();
        conflictconditions = new ArrayList<>();
        temporary_variable = new HashMap<>();
        for (int i = 0; i < the_rules.size(); i++) {
            System.out.println("Checking rule number "+ i);
            RBSRules curr_rule = the_rules.get(i);
            if(checkconflict2(curr_rule,i)){
                System.out.println("[DEBUG2222]Adding conflict set2");
            }
        }
        printConflicSet(conflictfacts, conflictrules);
    }
    
    private void findConflictSet3(){
        conflictfacts = new ArrayList<>();
        conflictrules = new ArrayList<>();
        conflictconditions = new ArrayList<>();
        
        for (int i = 0; i < the_rules.size(); i++) {
            ArrayList<ArrayList<RBSObject>> waitinglist = generateTobetested(the_rules.get(i));
            int[][] waitinglistindices = generateTobetestedindices(the_rules.get(i));
            for (int j = 0; j < waitinglist.size(); j++) {
                int want_to_add = 0; // untuk nyimpen doang sementara ... memastikan 3 kombinasinya memenuhi
                temporary_variable = new HashMap<>(); // setiap matching baru di ubah..
                outbreak:
                for (int k = 0; k < waitinglist.get(j).size(); k++) {
                    if(!checkcondition(the_rules.get(i).conditions.get(k), waitinglist.get(j).get(k))){
                        // sekali ada yang tidak memenuhi, break pindah kombinasi
                        break outbreak;
                    }else{
                        want_to_add++;
                        // note temporay..
                    }
                }
                
                // Add to conflict set if every combination is true
                if(want_to_add == waitinglist.get(j).size()){
                    System.out.println("Adding to conflict set : ..");
                    RFPair conflict = new RFPair();
                    conflict.rulenumber = i;
                    for (int k = 0; k < waitinglistindices[j].length; k++) {
                        conflict.matchedfact.add(waitinglistindices[j][k]);
                    }
                    conflicts.add(conflict);
                }                
                // every fact satisfy, put a note...
            }
        }
    }
    
    // RETE Algorithm
    private void findConflictSet4(){
        // 1. Untuk setiap rule,  cari alpha network
        
        // 2. Cari beta network yang intersect
        
        // 3. add to conflict set
    }
    
    private void generateNetFirst(){
        
        // dipanggil sekali setiap kali rule berubah jadi bukan di jbutton4
        HashSet<String> existing_class_types = new HashSet<>();
        HashSet<Pair<String,String>> existing_test_atom = new HashSet<>();
        Integer last_root = 0; // untuk nyimpen root paling akhir.. di iterasi objek tsb
        ArrayList<ThreePair> threepairs = new ArrayList<>();
        for (int i = 0; i < the_rules.size(); i++) {
            RBSRules curr_rule = the_rules.get(i);
            for (int j = 0; j < curr_rule.conditions.size(); j++) {
                RBSObject curr_obj = curr_rule.conditions.get(j);
                existing_class_types.add(curr_obj.name);
                
                // Langsung Create objek
                RBSGraphNode node_class = new RBSGraphNode(curr_obj.name, "alpha", curr_obj.name);
                
                // kalau belum pernah ada, anggap aja ini yang pertama
                if(!rete_network.contains(node_class)){
                    rete_network.add(node_class); // ini kapan di create coba ... harusnya gak dipanggil
                }
                // dapetin id dari last root paling akhir..
                last_root = rete_network.indexOf(node_class);
                
                
                for(Map.Entry<String,String> entry : curr_obj.attributes.entrySet()){
                    String attribute = entry.getKey();
                    String value = entry.getValue();
                    
                    System.out.println("Rule Num : "+i+" Condition num "+j+"Key : "+attribute+ " Value : "+ value);
                    if(!value.matches(MyParser.specification_variable)){
                        Pair<String,String> p = new Pair(attribute,value);
                        existing_test_atom.add(p);
                        
                        // langsung create node
                        RBSGraphNode node_tes = new RBSGraphNode(p.toString(),"alpha",attribute,value);
                        node_tes.parent_node.add(last_root);
                        if(!rete_network.contains(node_tes)){
                            rete_network.add(node_tes);
                            last_root = rete_network.indexOf(node_tes);
                        }
                    }else{
                        // kalau variabel handle dulu sementara..  // asumsi bahwa variabel harus paling akhir 
                        ThreePair tp = new ThreePair(last_root, value, attribute,i);
                        threepairs.add(tp);
                    }
                }
            }
        }
        
        // Print everything..
        Iterator it = existing_class_types.iterator();
        while(it.hasNext()){
            String type = (String) it.next();
            System.out.println(type);
        }
        
        Iterator it2 = existing_test_atom.iterator();
        while(it2.hasNext()){
            System.out.println(it2.next());
        }
        for (int i = 0; i < rete_network.size(); i++) {
            System.out.println(rete_network.get(i));
        }
        for (int i = 0; i < threepairs.size(); i++) {
            System.out.println(threepairs.get(i));
        }
    }
    
    
    
    
    private void printRFPairs(){
        System.out.println("Printing Conflict set found : ");
        for (int i = 0; i < conflicts.size(); i++) {
            System.out.println(conflicts.get(i));
        }
    }
    
    public void printConflicSet(ArrayList<Integer> conflictfacts, ArrayList<Integer> Conflictrules){
        System.out.println("Printing conflict Fact :");
        for (int i = 0; i < conflictfacts.size(); i++) {
            System.out.println("["+i+"] Conflict fact number :"+conflictfacts.get(i));
        }
        System.out.println("Printing conflict rules :");
        for (int i = 0; i < Conflictrules.size(); i++) {
            System.out.println("["+i+"] Conflict rules number :"+Conflictrules.get(i));
        }
        System.out.println("======================");
        
    }
    
    
    // Return true jika seluruh condition terpenuhi, return false jika ternyata rule tidak cocok dengan fact.
    private boolean checkconflict(RBSRules rule,RBSObject fact){
        // By default dianggap selalu memenuhi rule, jika ada satu kondisi saja yang tidak memenuh langsung return false.
        for (int i = 0; i < rule.conditions.size(); i++) {
            System.out.println("checking condition number "+i + "of the rule");
            RBSObject curr_condition = rule.conditions.get(i);
            if(!checkcondition(curr_condition,the_facts.get(i))){
                return false;
            }
        }
        return true;
    }
    
    private boolean checkconflict2(RBSRules rule, int rule_number){
        ArrayList<Integer> satisfied_facts = new ArrayList<>();
        for (int i = 0; i < rule.conditions.size(); i++) {
            boolean exist_fact_that_satisy_condition = false;
            RBSObject curr_condition = rule.conditions.get(i);
            for (int j = 0; j < the_facts.size(); j++) {
                System.out.println("Checking condition number " + i + " of the rule number "+rule_number+". Compared to fact number "+j);
                if(checkcondition(curr_condition, the_facts.get(j))){
                   ; exist_fact_that_satisy_condition = true;
                    satisfied_facts.add(j);
                    conflictconditions.add(j); // Record which fact satisfy conditons used for reference in actions
                    if (satisfied_facts.size() == rule.conditions.size()) {
                        // seluruh fact memenuhi disini ...
                        for (int k = 0; k < satisfied_facts.size(); k++) {
                            conflictfacts.add(satisfied_facts.get(k));
                            conflictrules.add(rule_number);
                        }
                    }
                }
            }
            
            if(!exist_fact_that_satisy_condition){
                return false;
            }else{
                System.out.println("HAI");
            }
        }
        
        return true;        
    }
    
    private ArrayList<ArrayList<RBSObject>> generateTobetested(RBSRules rule){
        ArrayList<ArrayList<RBSObject>> retval = new ArrayList<>();
        int num_fact = the_facts.size();
        int num_condition = rule.conditions.size();
        for (int i = 0; i < Math.pow(num_fact,num_condition); i++) {
            int[] combination = Util.convertobasen(i, num_fact, num_condition);
            
            ArrayList<RBSObject> single_item = new ArrayList<>();
            for (int j = 0; j < num_condition; j++) {
                single_item.add(the_facts.get(combination[j]));
            }
            retval.add(single_item);
        }
        return retval;
    }
    
    private int[][] generateTobetestedindices(RBSRules rule){
        int num_fact = the_facts.size();
        int num_condition = rule.conditions.size();        
        int[][] retval;
        Math.pow(num_fact,num_condition);
        retval = new int[(int)Math.pow(num_fact,num_condition)][num_condition];
        for (int i = 0; i < Math.pow(num_fact,num_condition); i++) {
            int[] combination = Util.convertobasen(i, num_fact, num_condition);
            retval[i] = combination;
        }
        
        return retval;
    }
    
    
    
    // Return true jika objek memenuhi condition, false sebaliknya
    private boolean checkcondition(RBSObject condition,RBSObject fact){
        if(condition.isPositive){
            System.out.println("Entering positive");
            System.out.println("Condition name : "+condition.name);
            System.out.println("Fact name:"+fact.name);
            if(condition.name.equals(fact.name)){
                // Harus memenuhi semua condition jadi by default return true kecuali ada yang masalh langsung return false
                for(String key : condition.attributes.keySet()){
                    String val = condition.attributes.get(key);
                    System.out.println("[RULE]Key to bechecked : "+key);
                    System.out.println("[RULE]Val to bechecked : "+val);
                    if(val.matches(MyParser.specification_variable)){
                        System.out.println("MASUK TEST TIPE VARIABEL");
                        // Kalau atom dianggap match seluruhnya dan bisa karena general.., justru masukin ke temporary variable
                        // cek dulu ada atau enggak variabel itu, kalau ada replace rule dengan variabel yang udah ada di temporary memory tapi kalau belum justru assign ke temporary memory...
                        if(!temporary_variable.containsKey(val)){
                            temporary_variable.put(val, fact.attributes.get(key));
                        }else{
                            // Evaluate seperti atom..
                            if(fact.hasAttribute(key)){
                                if(fact.hasAttributeValue(key, (String) temporary_variable.get(val))){
    //                                return true;
                                }else{
                                    return false;
                                }
                            }else{
                                return false;
                            }
                        }
                        
                        //return true;
                    }else if(val.matches(MyParser.specification_test_overall)){
                        System.out.println("MASUK TEST TIPE ");
                        // handle gimana coba ...
                        System.out.println("HARUSNYA KITA BIKIN FUNGSI EVALUASI TEST MATEMATIKA");
                        if(doBooleanEvaluation(key, val, fact)){
                            System.out.println("REturn true dan factnya adalha : " + fact.toString());
//                          return true;
                        }else{
                            System.out.println("Return false dan factnya adlaha " + fact.toString());
                            return false;
                        }
                    }else if(val.matches(MyParser.specification_atom)){
                        System.out.println("MASUK TEST TIPE ATOM");
                        // return membership benergak 
                        
                        if(fact.hasAttribute(key)){
                            if (fact.hasAttributeValue(key, val)) {
                                System.out.println("FACT : " + key + " >>> " + fact.attributes.get(key));
                                //return true;
                            } else {
                                return false;
                            }
                        }else{
                            return false;
                        }
                    }
                }
                return true;
            }else{
                // Kalau objeknya sudah beda pasti beda..
                return false;
            }
        }else{
            System.out.println("Entering negative");
            if(condition.name.equals(fact.name)){
                for(String key : condition.attributes.keySet()){
                    String val = condition.attributes.get(key);
                    System.out.println("[RULE]Key to bechecked : "+key);
                    System.out.println("[RULE]Val to bechecked : "+val);
                    if(val.matches(MyParser.specification_variable)){
                        // Kalau atom dianggap match seluruhnya dan bisa karena general.., justru masukin ke temporary variable
                        // cek dulu ada atau enggak variabel itu, kalau ada replace rule dengan variabel yang udah ada di temporary memory tapi kalau belum justru assign ke temporary memory...
                        if(!temporary_variable.containsKey(val)){
                            temporary_variable.put(val, fact.attributes.get(key));
                        }else{
                            // Evaluate seperti atom..
                            if(fact.hasAttributeValue(key, (String) temporary_variable.get(val))){
//                                return false;
                            }else{
                                return true;
                            }
                        }
                        
                        //return true;
                    }else if(val.matches(MyParser.specification_test_overall)){
                        // handle gimana coba ...
                        System.out.println("HARUSNYA KITA BIKIN FUNGSI EVALUASI TEST MATEMATIKA");
                        if(!doBooleanEvaluation(key, val, fact)){ // Penting tanda seru di depan soalnya harus ada .
                            System.out.println("REturn false dan factnya adalha : " + fact.toString());
//                            return true;
                        }else{
                            return true; // HATI HATI INI KETUKER BENERAN GAK PUSING KEPALA BARBIE INI CUMA BUAT YANG
                        }
                    }else if(val.matches(MyParser.specification_atom)){
                        // return membership benergak 
                        if(fact.hasAttribute(key)){
                            if(fact.hasAttributeValue(key, val)){
                                //return false;
                            }else{
                                return true;
                            }
                        }
                    }
                }
                return false;
            }else{
                System.out.println("YANG NEGATIVE BELUM DIIMPMENET SEMUANYA LOH");
                return false;
            }
        }
    }
    
//    private ArrayList<ArrayList<RBSObject>> generateEnumeration(int condition_count){
//        ArrayList<ArrayList<RBSObject>> retval = new ArrayList<>();
//        for (int i = 0; i < condition_count; i++) {
//            for (int j = 0; j < the_facts.size(); j++) {
//                
//            }
//        }
//    }
    
    
    
    
    // return true if the fact suitable with the rule
    public boolean doBooleanEvaluation(String attrname,String rule, RBSObject fact){
        if(rule.matches(MyParser.specification_test_overall)){
            // Contoh {<s} atau {<2}
            if(rule.matches(MyParser.specification_test2_variabel)){
                // Mungkin menimbulkan exception terutama kalau gak ada :
                String true_rule = rule;
                String variable_name = rule.replaceAll("[<>\\{\\}]", "");
                System.out.println("Rule input "+rule);
                        
//                if(temporary_variable.containsKey(variable_name)){
//                    true_rule = rule.replace(variable_name, (String) temporary_variable.get(variable_name));
//                }else{
//                    // Throw exception .. 
//                }
                if(rule.replace("{", "").startsWith("<")){
                    System.out.println("Unhandled yet .. so you should handle as the same as below ");
                    int indexmax  = findTheMostMaximum(attrname,fact);
                    if(fact.hasAttribute(attrname)){
                        if(fact.hasAttributeValue(attrname, (String) temporary_variable.get(variable_name))){
                            if (the_facts.get(indexmax).equals(fact)) {
                                return true;
                            } else {
                                return false;
                            }
                        }else{
                            return false;
                        }
                    }else{
                        return false;
                    }
//                    System.out.println("Temporary variable var name : "+variable_name+ " value : " +temporary_variable.get(variable_name));
//                    System.out.println("Attribute name fact :"+fact.attributes.get(attrname));
//                    if(Integer.valueOf(fact.attributes.get(attrname)) < Integer.valueOf((String) temporary_variable.get(variable_name))){
//                        return true;
//                    }else{
//                        return false;
//                    }    
                }else if(rule.replace("{", "").startsWith(">")){
                    /// PUSINNNGG PUSINNGG PUSINGG
                    System.out.println("Temporary variable var name : "+variable_name+ " value : " +temporary_variable.get(variable_name));
                    System.out.println("Attribute name fact :"+fact.attributes.get(attrname));
                    // Cek dulu apakah objek fakta yang sedang dipeirksa merefer ke atribut yang sama dengan variabel yang sudah ada ..
                    if(fact.hasAttribute(attrname)){
                        if(fact.hasAttributeValue(attrname, (String) temporary_variable.get(variable_name))){
                            int indexmin = findTheMostMinimum(attrname);
                            if (the_facts.get(indexmin).equals(fact)) {
                                return true;
                            } else {
                                return false;
                            }
                        }else{
                            return false;
                        }
                    }else{
                        return false; // kalau tidak punya attribut yang sama padahl variabel jelas-jelas melanggar
                    }
                }
            }else if(rule.matches(MyParser.specification_test3)){ // Case : {NOT XYZ}
                if(rule.replace("{", "").replace("}", "").trim().startsWith("NOT")){
                    System.out.println("Masuk ke blok not dan attribute name : "+attrname);
                    if(fact.hasAttribute(attrname)){
                        System.out.println("The fact has attribute"+attrname);
                        if (fact.hasAttributeValue(attrname, rule.replace("{", "").replace("}", "").replace("NOT", "").trim())) {
                            System.out.println("Atau justru malah kesini?");
                            return false;
                        } else {
                            System.out.println("Sherusnya kesini");
                            return true;
                        }
                    }else{
                        System.out.println("The fact doesn't have attribute"+attrname);
                        return false;
                    }
                }else{
                    if(fact.hasAttributeValue(attrname, rule.replace("{", "").replace("}", "").trim())){
                        System.out.println("Masuk ke blok biasa dan attribute name"+attrname);
                        return true;
                    }else{
                        return false;
                    }
                }
                
            } // Harusnya ada lebih banyak else if lagi selain 
        }else{
            // Harusnya else if ..
            return false;
        }
        // Ini jgua gak bener :
        return false;
    }
    
    public void copyfacts(){
        jTextArea3.setText(jTextArea2.getText());
    }
    
    // Return fact id which is the most minimum
    private int findTheMostMinimum(String attrname) {
        boolean firsttime = true;
        int mostminimum = 0;
        for (int i = 0; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            if(curr_fact.hasAttribute(attrname) && firsttime){
                mostminimum = i;
                firsttime = false;
            }else if(curr_fact.hasAttribute(attrname) && the_facts.get(mostminimum).hasAttribute(attrname)){
                int curr_val = Integer.valueOf((String) curr_fact.attributes.get(attrname));
                int temp_min_val = Integer.valueOf((String) the_facts.get(mostminimum).attributes.get(attrname));
                if(temp_min_val >= curr_val){
                    mostminimum = i;
                }
            }
        }
        return mostminimum;
    }
    
    private int findTheMostMaximum(String attrname,RBSObject fact){
        int mostmaximumindex =0;
        for (int i = 1; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            if(curr_fact.hasAttribute(attrname) && (the_facts.get(mostmaximumindex).attributes.get(attrname) != null)){
                if(Integer.valueOf((String) curr_fact.attributes.get(attrname)) >= Integer.valueOf((String) the_facts.get(mostmaximumindex).attributes.get(attrname))){
                    mostmaximumindex = i;
                }
            }
        }
        return mostmaximumindex;
    }
    
     
    /*
    * Conflict Resolution functions :
    * Every conflict resolution function returns -1 if it can't resolve which rules should be applied otherwise, it returns the index of rule 
    */
    private void doResolution(int rule_index){
        Integer rule_num = conflictrules.get(rule_index);
        System.out.println("Selected rule number : "+rule_num);
        ArrayList<RBSActions> actions = the_rules.get(rule_num).actions;
        
        for (int i = 0; i < actions.size(); i++) {
            RBSActions action = actions.get(i);
            if(action.type.equals(RBSActions.TYPE_ADD)){
                
                
                RBSObject to_be_added = new RBSObject();
                to_be_added.name = action.added.name;
                to_be_added.isPositive = action.added.isPositive;
                for(Map.Entry<String,String> entry : action.added.attributes.entrySet()){
                    String key = entry.getKey();
                    String val = entry.getValue();
                    if(val.startsWith("[")){
                        ArrayList<String> operands_string = parser.getVariableInEvaluation(val);
                        ArrayList<Integer> operands_number = parser.getNumberInEvaluation(val);
                        String symbol = val.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\\d+","").replaceAll(parser.specification_variable, "");
                        Integer operation_result = doevaluation(operands_string,operands_number,symbol);
                        to_be_added.attributes.put(key, String.valueOf(operation_result));
                        // find the operator first..
                    }else if(val.matches(MyParser.specification_atom)){
                        to_be_added.attributes.put(key,val);
                    }
                }
                the_facts.add(to_be_added); 
                
                
            }else if(action.type.equals(RBSActions.TYPE_MODIFY)){
                // check firtst whether the the fact has an attribute or not
                if(the_facts.get(conflictfacts.get(rule_num)).hasAttribute(cwd)){
                }
            }else if(action.type.equals(RBSActions.TYPE_REMOVE)){
                int removeidx = conflictconditions.get(action.refer-1);
                the_facts.remove(removeidx); // -1 karena seluruh index dimulai dari 0
                System.out.println("Ukuran the_facts sekarang : "+the_facts.size());
                // Clean up biar ordernya sesuai yang baru
//                ArrayList<RBSObject> newfacts = new ArrayList<>();
//                for (int j = 0; j < the_facts.size(); j++) {
//                    newfacts.add(the_facts.get(j)); 
//                }
//                the_facts = newfacts;
            }
        }
    }
    
     private void doResolution2(RFPair rfpair){
        int rule_num = rfpair.rulenumber;
        System.out.println("Selected rule-pair : "+rfpair.toString());
        jTextField2.setText(String.valueOf(rfpair.rulenumber));
        ArrayList<RBSActions> actions = the_rules.get(rule_num).actions;
        
        // Just to apply temporary variable...   
        temporary_variable = new HashMap<>();
        for (int i = 0; i < rfpair.matchedfact.size(); i++) {
            int cekrule = rfpair.rulenumber;
            int cekfact = rfpair.matchedfact.get(i);
            checkcondition(the_rules.get(cekrule).conditions.get(i), the_facts.get(cekfact));
        }
        
        for (int i = 0; i < actions.size(); i++) {
            RBSActions action = actions.get(i);
            if(action.type.equals(RBSActions.TYPE_ADD)){
                
                RBSObject to_be_added = new RBSObject();
                to_be_added.name = action.added.name;
                to_be_added.isPositive = action.added.isPositive;
                for(Map.Entry<String,String> entry : action.added.attributes.entrySet()){
                    String key = entry.getKey();
                    String val = entry.getValue();
                    if(val.startsWith("[")){
                        ArrayList<String> operands_string = parser.getVariableInEvaluation(val);
                        ArrayList<Integer> operands_number = parser.getNumberInEvaluation(val);
                        String symbol = val.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\\d+","").replaceAll(parser.specification_variable, "");
                        Integer operation_result = doevaluation(operands_string,operands_number,symbol);
                        to_be_added.attributes.put(key, String.valueOf(operation_result));
                        // find the operator first..
                    }else if(val.matches(MyParser.specification_atom)){
                        to_be_added.attributes.put(key,val);
                    }
                }
                the_facts.add(to_be_added); 
                
                
            }else if(action.type.equals(RBSActions.TYPE_MODIFY)){
                // check firtst whether the the fact has an attribute or not
                int modidx = rfpair.matchedfact.get((int) action.refer - 1);                
                String[] key_val = action.key_value.replaceAll("\\(", "").replaceAll("\\)", "").split(" ");
                String key = key_val[0];
                String val = key_val[1];
                the_facts.get(modidx).attributes.put(key, val);
//                if(the_facts.get(modidx).hasAttribute(key)){
//                    
//                }else{
//                    the_facts.get(modidx).attributes.put(key, val);
//                }
//                action
//                the_facts.get(modidx).hasAttribute(cwd)
//                if(the_facts.get(conflictfacts.get(rule_num)).hasAttribute(cwd)){
//                }
            }else if(action.type.equals(RBSActions.TYPE_REMOVE)){
                int removeidx = rfpair.matchedfact.get((int)action.refer - 1 ); // refer -1 karena start index definisi manusia berbeda dengan java
                the_facts.remove(removeidx); // -1 karena seluruh index dimulai dari 0
                System.out.println("Ukuran the_facts sekarang : "+the_facts.size());
                // Clean up biar ordernya sesuai yang baru
//                ArrayList<RBSObject> newfacts = new ArrayList<>();
//                for (int j = 0; j < the_facts.size(); j++) {
//                    newfacts.add(the_facts.get(j)); 
//                }
//                the_facts = newfacts;
            }
        }
        
        
        // Add to history
        // Add to History first .. 
         history.add(rfpair);
    }
    
    public void PrintWME(){
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < the_facts.size(); i++) {
            RBSObject curr_fact = the_facts.get(i);
            
            if(!curr_fact.isPositive){
                sb.append("NOT ");
            }
            sb.append("(");
            sb.append(curr_fact.name);
            for(Map.Entry<String,String> entry: curr_fact.attributes.entrySet()){
                String key = entry.getKey();
                String val = entry.getValue();
                sb.append(" "+key+":"+val+";");
            }
            sb.append(")\n");
        }
        jTextArea3.setText(sb.toString());
    }
    
    
    private RFPair decideResolveMethod() {
        
        RFPair selected_rfpair;
        
        if(SP() != null){
            selected_rfpair = SP();
        }else if(RF() != null){
            selected_rfpair = RF();
        }else if(resolveByRecency()!=null){
            selected_rfpair = resolveByRecency();
        }else{
            // Resolve by order // must be true
           selected_rfpair = RO();
        }
        return selected_rfpair;
    }
    
    
    
    /*
    Resolve By refactoriness 
    */
    private RFPair RF(){
        System.out.println("Resolved by Refactoriness");
        // Convert to unique value first 
        HashSet<Integer> rules = new HashSet<>(conflictrules);
        HashSet<RFPair> conflicted_rules = new HashSet<>(conflicts);
        conflicted_rules.removeAll(history);
        
        if(conflicted_rules.size()>1){
            return null;
        }else{
            ArrayList<RFPair> output_candidate = new ArrayList<>();
            Iterator iterator = conflicted_rules.iterator();
            while(iterator.hasNext()){
                output_candidate.add((RFPair) iterator.next());
            }
            if(output_candidate.size()!=1){
                return null;
            }else{
                return output_candidate.get(0);
            }
        }
    }
    
    private RFPair resolveByRecency(){
        System.out.println("Resolve by Recency NOT IMPLEMENTED yet");
        return null;
    }
    
    private RFPair RO(){
        System.out.println("Resolved by Rule Order");
        return conflicts.get(0); // selalu yang pertama..
    }
    
    private RFPair SP(){
        System.out.println("Resolved by Specificity");
        HashMap<Integer, Integer> scoring = new HashMap<>(); // save mapping from rule number with specificity score number
        for (int i = 0; i < conflicts.size(); i++) {
            int score = the_rules.get(conflicts.get(i).rulenumber).conditions.size();
            for (int j = 0; j < the_rules.get(conflicts.get(i).rulenumber).conditions.size(); j++) {
                score = score + the_rules.get(conflicts.get(i).rulenumber).conditions.get(j).attributes.size();
            }
            scoring.put(conflicts.get(i).rulenumber, score);
        }
        
        
        // find the maximum value
        int maxvalue = Integer.MIN_VALUE;
        int key = 0;
        for(Map.Entry<Integer,Integer> entry : scoring.entrySet()){
            if(entry.getValue()>maxvalue){
                maxvalue = entry.getValue();
                key = entry.getKey();
            }
        }
        //count how many maximum value
        int count = 0;
        for(Map.Entry<Integer,Integer> entry : scoring.entrySet()){
            if(entry.getValue()==maxvalue){
                count++;
            }
        }
        
        // if it more than 1 return -1 
        if(count>1){
            return null;
        }else{
            // else return the index of conflicts for suitable rule...
            ArrayList<Integer> _keys = new ArrayList<>();
            for (int i = 0; i < conflicts.size(); i++) {
                if(conflicts.get(i).rulenumber.equals(key)){
                    _keys.add(i);
                }
            }
            
            if(_keys.size()!=1){
                return null;
            }else{
                return conflicts.get(_keys.get(0));
            }
        }
    }
    
    private Integer doevaluation(ArrayList<String> operands_string, ArrayList<Integer> operands_number, String symbol) {
        ArrayList<Integer> operand_integer = new ArrayList<Integer>();
        for (int i = 0; i < operands_string.size(); i++) {
            // Look up variabel dulu sih..
            String temp = (String) temporary_variable.get(operands_string.get(i));
            operand_integer.add(Integer.valueOf(temp));
        }
        Integer calculation_result = 0;
        
        if (symbol.equals("+")) {
            for (int i = 0; i < operand_integer.size(); i++) {
                for (int j = 0; j < operands_number.size(); j++) {
                    calculation_result = calculation_result + (operand_integer.get(i) + operands_number.get(j));
                }
            }
        } else if (symbol.equals("-")) {
            for (int i = 0; i < operand_integer.size(); i++) {
                for (int j = 0; j < operands_number.size(); j++) {
                    calculation_result = calculation_result + (operand_integer.get(i) - operands_number.get(j));
                }
            }
        } else if (symbol.equals("%")) {
            for (int i = 0; i < operand_integer.size(); i++) {
                for (int j = 0; j < operands_number.size(); j++) {
                    calculation_result = calculation_result + (operand_integer.get(i) % operands_number.get(j));
                }
            }
        } else if (symbol.equals("/")) {
            System.out.println(" NOT IMPLEMENTED DIVSION OPERATION");
        } else if (symbol.equals("*")) {
            System.out.println(" NOT IMPLEMENTED MULTIPLICATION OPERATION");
        }
        
        return calculation_result;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RBSEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RBSEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RBSEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RBSEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RBSEditorUI().setVisible(true);
            }
        });
    }
    
    private void updateTable(){
        dtm.setRowCount(0);
        String[][] _model = new String[conflicts.size()][2];
        for (int i = 0; i < conflicts.size(); i++) {
            _model[i][0] = String.valueOf(conflicts.get(i).rulenumber);
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < conflicts.get(i).matchedfact.size(); j++) {
                sb.append(String.valueOf(conflicts.get(i).matchedfact.get(j)));
                sb.append(",");
            }
            String res = sb.toString();
            _model[i][1] = res.substring(0,res.length()-1);
        }
        for (int i = 0; i < _model.length; i++) {
            dtm.addRow(_model[i]);
        }
        //dtm.addRow();
    }
    
    private void loadOrder(){
        String string_orders = jTextField1.getText();
        String[] order_array = string_orders.split(",");
        for (int i = 0; i < order_array.length; i++) {
            conflict_method_order[i] = order_array[i];
        }
    }
    
    private void printOrder(){
        for (int i = 0; i < conflict_method_order.length; i++) {
            System.out.println("["+i+"]"+conflict_method_order[i]);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables



}
